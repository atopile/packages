#pragma experiment("FOR_LOOP")
#pragma experiment("BRIDGE_CONNECT")
import I2C, SPI, UART_Base, USB2_0, ElectricPower, Resistor, Capacitor
from "atopile/buttons/buttons.ato" import ButtonPullup

from "RP2040.ato" import RP2040


module RP2040Kit:
    # External interfaces
    power_3v3 = new ElectricPower
    i2c = new I2C
    spi = new SPI
    spi1 = new SPI
    qspi = new QSPI
    uart = new UART_Base
    usb2 = new USB2_0

    # Components
    micro = new RP2040
    reset_btn = new ButtonPullup
    boot_btn = new ButtonPullup
    osc = new _Oscillator
    flash = new _W25Q128JVSIQ

    # Internal
    signal _gnd
    micro.gnd ~ _gnd

    # Reset button
    reset_btn.output.reference ~ power_3v3
    reset_btn.output.line ~ micro.run

    # Boot button
    boot_btn.output.reference ~ power_3v3
    boot_btn.output.line ~ micro.qspi_ss_n
    boot_btn.pullup.resistance = 10kohms +/- 5%

    qspi_ss_pullup = new Resistor
    qspi_ss_pullup.resistance = 10kohms +/- 5%
    qspi_ss_pullup.package = "R0402"
    power_3v3.vcc ~> qspi_ss_pullup ~> micro.qspi_ss_n

    usb_series_resistors = new Resistor[2]
    for resistor in usb_series_resistors:
        resistor.resistance = 27ohms +/- 5%
        resistor.package = "R0402"

    # Connect series resistors to usb
    usb2.usb_if.d.p.line ~> usb_series_resistors[0] ~> micro.usb_dp
    usb2.usb_if.d.n.line ~> usb_series_resistors[1] ~> micro.usb_dm

    # Flash
    power_3v3 ~ flash.power
    qspi ~ flash.qspi

    # Oscillator
    osc.input ~ micro.xin
    osc.output ~ micro.xout
    osc.gnd ~ _gnd

    # 1V power for internal DVDD digital logic
    power_1V = new ElectricPower
    power_1V.hv ~ micro.dvdd
    power_1V.gnd ~ _gnd

    # Power the 1V rail from the internal regulator
    micro.vreg_vin ~ power_3v3.vcc
    micro.vreg_vout ~ micro.dvdd

    power_3v3_caps = new Capacitor[5]
    for cap in power_3v3_caps:
        cap.capacitance = 1uF +/- 20%
        cap.package = "C0402"
        power_3v3 ~ cap.power

    power_1V_caps = new Capacitor[3]
    for cap in power_1V_caps:
        cap.capacitance = 1uF +/- 20%
        cap.package = "C0402"
        power_1V ~ cap.power

    # make all gpio pins available at the top level
    signal gpio0 ~ micro.gpio0
    signal gpio1 ~ micro.gpio1
    signal gpio2 ~ micro.gpio2
    signal gpio3 ~ micro.gpio3
    signal gpio4 ~ micro.gpio4
    signal gpio5 ~ micro.gpio5
    signal gpio6 ~ micro.gpio6
    signal gpio7 ~ micro.gpio7
    signal gpio8 ~ micro.gpio8
    signal gpio9 ~ micro.gpio9
    signal gpio10 ~ micro.gpio10
    signal gpio11 ~ micro.gpio11
    signal gpio12 ~ micro.gpio12
    signal gpio13 ~ micro.gpio13
    signal gpio14 ~ micro.gpio14
    signal gpio15 ~ micro.gpio15
    signal gpio16 ~ micro.gpio16
    signal gpio17 ~ micro.gpio17
    signal gpio18 ~ micro.gpio18
    signal gpio19 ~ micro.gpio19
    signal gpio20 ~ micro.gpio20
    signal gpio21 ~ micro.gpio21
    signal gpio22 ~ micro.gpio22
    signal gpio23 ~ micro.gpio23
    signal gpio24 ~ micro.gpio24
    signal gpio25 ~ micro.gpio25
    signal gpio26_a0 ~ micro.gpio26_a0
    signal gpio27_a1 ~ micro.gpio27_a1
    signal gpio28_a2 ~ micro.gpio28_a2
    signal gpio29_a3 ~ micro.gpio29_a3


    # FIXME: it's poor practice to embed interfaces within components
    # elevate these out to the driver level
    # The TESTEN pin is used for factory testing and should be tied to GND
    _gnd ~ micro.testen

    # USB phy power is a nominal 3v3
    # But can be tied to IOVDD is USB is not used
    power_3v3.hv ~ micro.usb_vdd
    power_3v3.gnd ~ _gnd

    # IOVDD is a nominal 3v3
    power_3v3.hv ~ micro.iovdd
    power_3v3.hv ~ micro.adc_avdd
    power_3v3.gnd ~ _gnd

    # I2C interface
    i2c.sda ~ gpio20
    i2c.scl ~ gpio21

    # UART interface
    uart.tx ~ gpio4
    uart.rx ~ gpio5

    # SPI interface
    signal spi_cs ~ gpio9
    spi.mosi ~ gpio11
    spi.miso ~ gpio8
    spi.sclk ~ gpio10

    signal spi1_cs ~ gpio7
    spi1.mosi ~ gpio11
    spi1.miso ~ gpio8
    spi1.sclk ~ gpio10

    # QSPI interface
    qspi.cs ~ micro.qspi_ss_n
    qspi.sclk ~ micro.qspi_sclk
    qspi.io0 ~ micro.qspi_sd0
    qspi.io1 ~ micro.qspi_sd1
    qspi.io2 ~ micro.qspi_sd2
    qspi.io3 ~ micro.qspi_sd3

component _X322512MSB4SI:
    frequency = 12MHz
    lcsc_id = "C9002"
    footprint = "OSC-SMD_4P-L3.2-W2.5-BL"
    signal input ~ pin 1
    signal out ~ pin 3
    signal gnd ~ pin 2
    gnd ~ pin 4


module _Oscillator:
    # the oscillator itself
    signal input
    signal output
    signal gnd

    osc = new _X322512MSB4SI
    input ~ osc.input
    gnd ~ osc.gnd

    # output resistor
    r_osc = new Resistor
    r_osc.resistance = 1kohms +/- 5%
    r_osc.package = "R0402"
    output ~ r_osc.p1; r_osc.p2 ~ osc.out

    # load caps
    c_osc_1 = new Capacitor
    c_osc_1.capacitance = 20pF +/- 20%
    c_osc_1.package = "C0402"
    c_osc_2 = new Capacitor
    c_osc_2.capacitance = 20pF +/- 20%
    c_osc_2.package = "C0402"

    input ~ c_osc_1.p1; c_osc_1.p2 ~ gnd
    osc.out ~ c_osc_2.p1; c_osc_2.p2 ~ gnd


component _W25Q128JVSIQ:
    footprint = "SOIC-8_L5.3-W5.3-P1.27-LS8.0-BL"
    lcsc_id = "C97521"

    # pins
    signal ncs ~ pin 1
    signal do ~ pin 2
    signal io2 ~ pin 3
    signal gnd ~ pin 4
    signal di ~ pin 5
    signal clk ~ pin 6
    signal io3 ~ pin 7
    signal vcc ~ pin 8

    power = new ElectricPower
    power.gnd ~ gnd
    power.hv ~ vcc

    qspi = new QSPI
    qspi.cs ~ ncs
    qspi.sclk ~ clk
    qspi.io0 ~ di
    qspi.io1 ~ do
    qspi.io2 ~ io2
    qspi.io3 ~ io3


interface QSPI:
    signal cs
    signal sclk
    signal io0
    signal io1
    signal io2
    signal io3
