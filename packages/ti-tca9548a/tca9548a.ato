import ElectricPower, I2C, ElectricLogic, Resistor, Capacitor, Addressor3
from "resistors.ato" import I2CPullup


module TCA9548APWR:
    ic = new _TCA9548APWR
    power = new ElectricPower
    i2c = new I2C
    reset = new ElectricLogic
    i2c.sda.line ~ ic.SDA
    i2c.scl.line ~ ic.SCL

    # connect the power
    power.vcc ~ ic.VCC
    power.gnd ~ ic.GND

    #bypass caps
    c1 = new Capacitor
    c1.capacitance = 100nF +/- 20%
    c1.package = "C0402"
    c1.power ~ power

    c2 = new Capacitor
    c2.capacitance = 2.2uF +/- 20%
    c2.package = "C0603"
    c2.power ~ power

    # Reset
    reset.line ~ ic.RESET_
    reset_pullup = new Resistor
    reset_pullup.resistance = 10kohm +/- 10%
    reset_pullup.package = "R0402"
    reset.line ~ reset_pullup.p1; reset_pullup.p2 ~ power.vcc
    power ~ reset.reference

    # Address bits
    # +------+------+------+----------------+-----------------+
    # |  A2  |  A1  |  A0  | Decimal Output | Hexadecimal Out |
    # +------+------+------+----------------+-----------------+
    # |  L   |  L   |  L   |      112       |       70        |
    # +------+------+------+----------------+-----------------+
    # |  L   |  L   |  H   |      113       |       71        |
    # +------+------+------+----------------+-----------------+
    # |  L   |  H   |  L   |      114       |       72        |
    # +------+------+------+----------------+-----------------+
    # |  L   |  H   |  H   |      115       |       73        |
    # +------+------+------+----------------+-----------------+
    # |  H   |  L   |  L   |      116       |       74        |
    # +------+------+------+----------------+-----------------+
    # |  H   |  L   |  H   |      117       |       75        |
    # +------+------+------+----------------+-----------------+
    # |  H   |  H   |  L   |      118       |       76        |
    # +------+------+------+----------------+-----------------+
    # |  H   |  H   |  H   |      119       |       77        |
    # +------+------+------+----------------+-----------------+

    # Addressor - connect the address lines to the addressor
    # allows the i2c.address parameter to configure the address pins
    addressor = new Addressor3 # 3-bit addressor
    assert addressor.address is i2c.address # Link addresses
    assert addressor.base is 0x70
    addressor.address_lines[0].line ~ ic.A0
    addressor.address_lines[0].reference ~ power
    addressor.address_lines[1].line ~ ic.A1
    addressor.address_lines[1].reference ~ power
    addressor.address_lines[2].line ~ ic.A2
    addressor.address_lines[2].reference ~ power


    i2c0 = new I2C
    i2c0.sda.line ~ ic.SD0
    i2c0.scl.line ~ ic.SC0
    pullup0 = new I2CPullup
    pullup0.i2c ~ i2c0
    pullup0.power ~ power

    i2c1 = new I2C
    i2c1.sda.line ~ ic.SD1
    i2c1.scl.line ~ ic.SC1
    pullup1 = new I2CPullup
    pullup1.i2c ~ i2c1
    pullup1.power ~ power

    i2c2 = new I2C
    i2c2.sda.line ~ ic.SD2
    i2c2.scl.line ~ ic.SC2
    pullup2 = new I2CPullup
    pullup2.i2c ~ i2c2
    pullup2.power ~ power

    i2c3 = new I2C
    i2c3.sda.line ~ ic.SD3
    i2c3.scl.line ~ ic.SC3
    pullup3 = new I2CPullup
    pullup3.i2c ~ i2c3
    pullup3.power ~ power

    i2c4 = new I2C
    i2c4.sda.line ~ ic.SD4
    i2c4.scl.line ~ ic.SC4
    pullup4 = new I2CPullup
    pullup4.i2c ~ i2c4
    pullup4.power ~ power

    i2c5 = new I2C
    i2c5.sda.line ~ ic.SD5
    i2c5.scl.line ~ ic.SC5
    pullup5 = new I2CPullup
    pullup5.i2c ~ i2c5
    pullup5.power ~ power

    i2c6 = new I2C
    i2c6.sda.line ~ ic.SD6
    i2c6.scl.line ~ ic.SC6
    pullup6 = new I2CPullup
    pullup6.i2c ~ i2c6
    pullup6.power ~ power

    i2c7 = new I2C
    i2c7.sda.line ~ ic.SD7
    i2c7.scl.line ~ ic.SC7
    pullup7 = new I2CPullup
    pullup7.i2c ~ i2c7
    pullup7.power ~ power


component _TCA9548APWR:
    # component TCA9548APWR
    footprint = "TSSOP-24_L7.8-W4.4-P0.65-LS6.4-BL"
    lcsc_id = "C130026"
    # pins
    signal A0 ~ pin 1
    signal A1 ~ pin 2
    signal RESET_ ~ pin 3
    signal SD0 ~ pin 4
    signal SC0 ~ pin 5
    signal SD1 ~ pin 6
    signal SC1 ~ pin 7
    signal SD2 ~ pin 8
    signal SC2 ~ pin 9
    signal SD3 ~ pin 10
    signal SC3 ~ pin 11
    signal GND ~ pin 12
    signal SD4 ~ pin 13
    signal SC4 ~ pin 14
    signal SD5 ~ pin 15
    signal SC5 ~ pin 16
    signal SD6 ~ pin 17
    signal SC6 ~ pin 18
    signal SD7 ~ pin 19
    signal SC7 ~ pin 20
    signal A2 ~ pin 21
    signal SCL ~ pin 22
    signal SDA ~ pin 23
    signal VCC ~ pin 24

module Test:
    mux1 = new TCA9548APWR
    mux2 = new TCA9548APWR
    mux3 = new TCA9548APWR
    mux4 = new TCA9548APWR
    mux5 = new TCA9548APWR
    mux6 = new TCA9548APWR
    mux7 = new TCA9548APWR
    mux8 = new TCA9548APWR

    i2c = new I2C
    power = new ElectricPower

    i2c ~ mux1.i2c
    i2c ~ mux2.i2c
    i2c ~ mux3.i2c
    i2c ~ mux4.i2c
    i2c ~ mux5.i2c
    i2c ~ mux6.i2c
    i2c ~ mux7.i2c
    i2c ~ mux8.i2c

    mux1.power ~ power
    mux2.power ~ power
    mux3.power ~ power
    mux4.power ~ power
    mux5.power ~ power
    mux6.power ~ power
    mux7.power ~ power
    mux8.power ~ power

    assert mux1.addressor.address is 0x70
    assert mux2.addressor.address is 0x71
    assert mux3.addressor.address is 0x72
    assert mux4.addressor.address is 0x73
    assert mux5.addressor.address is 0x74
    assert mux6.addressor.address is 0x75
    assert mux7.addressor.address is 0x76
    assert mux8.addressor.address is 0x77
