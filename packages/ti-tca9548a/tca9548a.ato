#pragma experiment("FOR_LOOP")
#pragma experiment("BRIDGE_CONNECT")
#pragma experiment("MODULE_TEMPLATING")

import I2C
import ElectricPower
import ElectricLogic
import Resistor
import Capacitor
import Addressor

from "resistors.ato" import I2CPullup

component TCA9548APWR_package:
    lcsc_id = "C130026"

    # pins
    signal A0 ~ pin 1
    signal A1 ~ pin 2
    signal RESET ~ pin 3
    signal SD0 ~ pin 4
    signal SC0 ~ pin 5
    signal SD1 ~ pin 6
    signal SC1 ~ pin 7
    signal SD2 ~ pin 8
    signal SC2 ~ pin 9
    signal SD3 ~ pin 10
    signal SC3 ~ pin 11
    signal GND ~ pin 12
    signal SD4 ~ pin 13
    signal SC4 ~ pin 14
    signal SD5 ~ pin 15
    signal SC5 ~ pin 16
    signal SD6 ~ pin 17
    signal SC6 ~ pin 18
    signal SD7 ~ pin 19
    signal SC7 ~ pin 20
    signal A2 ~ pin 21
    signal SCL ~ pin 22
    signal SDA ~ pin 23
    signal VCC ~ pin 24

module TCA9548APWR_driver:
    # External Interfaces
    power = new ElectricPower
    i2c = new I2C
    reset = new ElectricLogic

    # Package
    package = new TCA9548APWR_package

    # Connect I2C
    i2c.sda.line ~ package.SDA
    i2c.scl.line ~ package.SCL

    # Connect Power
    power.vcc ~ package.VCC
    power.gnd ~ package.GND

    # Bypass caps
    bypass_caps = new Capacitor[2]
    for cap in bypass_caps:
        power.vcc ~> cap ~> power.gnd
        cap.package = "C0402"

    bypass_caps[0].capacitance = 100nF +/- 20%
    bypass_caps[1].capacitance = 2.2uF +/- 20%

    # Reset
    reset.line ~ package.RESET
    reset_pullup = new Resistor
    reset_pullup.resistance = 10kohm +/- 10%
    reset_pullup.package = "R0402"
    reset.line ~> reset_pullup ~> power.vcc
    reset.reference ~ power

    # Addressor
    addressor = new Addressor<address_bits=3>
    assert addressor.base is 0x70
    assert addressor.address is i2c.address
    addressor.address_lines[0].line ~ package.A0
    addressor.address_lines[1].line ~ package.A1
    addressor.address_lines[2].line ~ package.A2

    for address_line in addressor.address_lines:
        address_line.reference ~ power

    # I2C channels
    i2cs = new I2C[8]

    # Connect I2C channels to package
    i2cs[0].sda.line ~ package.SD0
    i2cs[0].scl.line ~ package.SC0
    i2cs[1].sda.line ~ package.SD1
    i2cs[1].scl.line ~ package.SC1
    i2cs[2].sda.line ~ package.SD2
    i2cs[2].scl.line ~ package.SC2
    i2cs[3].sda.line ~ package.SD3
    i2cs[3].scl.line ~ package.SC3
    i2cs[4].sda.line ~ package.SD4
    i2cs[4].scl.line ~ package.SC4
    i2cs[5].sda.line ~ package.SD5
    i2cs[5].scl.line ~ package.SC5
    i2cs[6].sda.line ~ package.SD6
    i2cs[6].scl.line ~ package.SC6
    i2cs[7].sda.line ~ package.SD7
    i2cs[7].scl.line ~ package.SC7

    # Pullups on each I2C channel
    pullups = new I2CPullup[8]
    for pullup in pullups:
        pullup.power ~ power

    i2cs[0] ~ pullups[0].i2c
    i2cs[1] ~ pullups[1].i2c
    i2cs[2] ~ pullups[2].i2c
    i2cs[3] ~ pullups[3].i2c
    i2cs[4] ~ pullups[4].i2c
    i2cs[5] ~ pullups[5].i2c
    i2cs[6] ~ pullups[6].i2c
    i2cs[7] ~ pullups[7].i2c

module Test:
    # Create 8 muxes
    muxes = new TCA9548APWR_driver[8]

    # Create I2C and Power
    power = new ElectricPower
    i2c = new I2C

    # Connect I2C
    for mux in muxes:
        i2c ~ mux.i2c
        power ~ mux.power

    # Assert addresses
    assert muxes[0].i2c.address is 0x70
    assert muxes[1].i2c.address is 0x71
    assert muxes[2].i2c.address is 0x72
    assert muxes[3].i2c.address is 0x73
    assert muxes[4].i2c.address is 0x74
    assert muxes[5].i2c.address is 0x75
    assert muxes[6].i2c.address is 0x76
    assert muxes[7].i2c.address is 0x77
