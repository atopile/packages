#pragma experiment("BRIDGE_CONNECT")

import ElectricPower, I2C, ElectricSignal
import MOSFET, Resistor, Capacitor, Inductor
from "resistors.ato" import I2CPullup

# Components
from "components/texas_instruments_ads1115.ato" import Texas_Instruments_ADS1115
from "components/digitalBuck.ato" import DigitalBuck
from "components/digitalLDO.ato" import DigitalLDO
from "components/Ylptec_BYYXX.ato" import BYYXXS_2WR2, _B2405
from "components/texas_instruments_tca6408.ato" import Texas_Instruments_TCA6408
from "components/current-sensor.ato" import CurrentSensor
from "components/YNR4030.ato" import YNR4030_101M
from "components/sk6805-ec20/elec/src/sk6805-ec20.ato" import SK6805EC20
from "components/relay.ato" import PowerRelay
from "components/um_wyoutai_semiconductor_co_ltd_xc6206p332m_r.ato" import UMWYoutai_Semiconductor_Co___Ltd__XC6206P332MR

from "atopile/ti-iso1640x/ti-iso1640.ato" import Texas_Instruments_ISO1640_driver
from "atopile/ti-iso1640x/ti-iso1640.ato" import Texas_Instruments_ISO1640QDWRQ1_package


module Cell:
    """
    Isolated stackable cell module with digital control and monitoring
    Power:
    Isolated DCDC converter -> Buck regulator -> LDO -> filter -> Output switch -> current sensor -> Cell output

    Control:
    Digital isolator (i2c) ->
        - ADC current sense
        - ADC voltage sense (buck)
        - ADC voltage sense (LDO)
        - gpio output (switch)
        - DAC (buck)
        - DAC (LDO)

    Parts list:
        gpio expander: TCA6408ARGTR (0x20/0x21)
        DAC: MCP4725A0T-E/CH
        ADC: ADS1115IDGSR
        Digital isolator: ISO1640BDR
        Output relay: HFD4/5-SR
        Buck regulator: TPS563201DDCR
        LDO: TLV75901PDRVR
        Addressable leds: SK6805
    """
    # External interfaces
    power_in = new ElectricPower
    power_out = new ElectricPower
    power_5v = new ElectricPower # isolated 5V rail
    power_isolator = new ElectricPower # power for digital isolators
    dmm_out = new ElectricPower
    i2c = new I2C
    cell_up = new CellJumper
    cell_down = new CellJumper
    dmm_relay_enable = new ElectricSignal

    # Internal interfaces
    _power_5v = new ElectricPower
    _power_3v3 = new ElectricPower
    _iso_i2c = new I2C

    isolated_converter = new BYYXXS_2WR2
    isolated_converter.converter -> _B2405
    adc = new Texas_Instruments_ADS1115
    buck = new DigitalBuck
    ldo = new DigitalLDO
    current_sense = new CurrentSensor
    output_relay = new PowerRelay
    dmm_relay = new PowerRelay
    gpio = new Texas_Instruments_TCA6408
    filter = new PiFilter
    digital_isolator = new Texas_Instruments_ISO1640_driver
    digital_isolator.package -> Texas_Instruments_ISO1640QDWRQ1_package
    voltage_led = new SK6805EC20
    current_led = new SK6805EC20
    load_switch = new LowSideSwitch
    load_resistor = new Resistor
    i2c_pullup = new I2CPullup
    external_load = new LowSideSwitch
    external_load_resistor = new Resistor

    # addresses:
    assert adc.i2c.address is 0x48
    assert buck.dac.i2c.address is 0x61
    assert ldo.dac.i2c.address is 0x60
    assert gpio.i2c.address is 0x20

    # Explicit address connections (addressor is being flakey)
    buck.dac.ic.A0 ~ buck.dac.power.vcc
    ldo.dac.ic.A0 ~ ldo.dac.power.gnd
    gpio.ic.ADDR ~ gpio.power.gnd

    # I2C pullup
    _power_3v3 ~ i2c_pullup.power
    _iso_i2c ~ i2c_pullup.i2c

    # Power LEDs
    power_5v ~ voltage_led.power
    power_5v ~ current_led.power

    # Connect LEDs
    cell_down.led_data ~ current_led.din
    current_led.dout ~ voltage_led.din
    voltage_led.dout ~ cell_up.led_data

    # Jumper connections
    cell_up.cell.line ~ filter.power_out.vcc
    cell_down.cell.line ~ filter.power_out.gnd

    # Digital i2c isolator
    i2c ~> digital_isolator ~> _iso_i2c

    # Connect I2C to devices
    _iso_i2c ~ adc.i2c
    _iso_i2c ~ buck.i2c
    _iso_i2c ~ ldo.i2c
    _iso_i2c ~ gpio.i2c

    # Internal rails
    internal_ldo = new UMWYoutai_Semiconductor_Co___Ltd__XC6206P332MR
    _power_5v ~ internal_ldo.power_in
    internal_ldo.power_out ~ _power_3v3

    # Pi Filter
    filter.C1.capacitance = 10uF +/- 10%
    filter.C1.package = "C0805"
    filter.L1.lcsc_id = "C341017"
    filter.C2.capacitance = 10uF +/- 10%
    filter.C2.package = "C0805"

    # # Current sense config
    current_sense.max_current = 0.5A
    current_sense.shunt.resistance = 100mohm +/- 10%

    # # Power devices
    power_isolator ~ digital_isolator.power_rails[0]
    _power_5v ~ adc.power
    _power_3v3 ~ digital_isolator.power_rails[1]
    _power_3v3 ~ buck.power_3v3
    _power_3v3 ~ ldo.power_3v3
    _power_3v3 ~ gpio.power
    _power_3v3 ~ current_sense.power
    _power_5v ~ output_relay.power_relay
    power_5v ~ dmm_relay.power_relay

    #TODO: do the math in ato
    # Buck config: vout = 5v when vctrl = 0V, vout = 0V when vctrl = 3.3V
    assert buck.power_out.voltage within 0V to 5V
    buck.feedback_div.r_top.resistance = 37kohm +/- 3%
    buck.feedback_div.r_bottom.resistance = 10kohm +/- 2%
    buck.feedback_div.r_ctrl.resistance = 24kohm +/- 2%

    #TODO: do the math in ato
    # LDO config: vout = 5v when vctrl = 0V, vout = 0V when vctrl = 3.3V
    ldo.feedback_div.r_top.resistance = 60kohm +/- 2%
    ldo.feedback_div.r_bottom.resistance = 10kohm +/- 2%
    ldo.feedback_div.r_ctrl.resistance = 43kohm +/- 2%

    # Connect Cell components
    power_in ~ isolated_converter.power_in
    isolated_converter.power_out ~ _power_5v
    _power_5v ~ buck.power_in
    buck.power_out ~ ldo.power_in
    ldo.power_out ~ filter.power_in
    filter.power_out ~ current_sense.power_in
    current_sense.power_out ~ output_relay.power_in
    output_relay.power_out ~ power_out

    # # Load switch
    filter.power_out ~ load_switch.power_in
    load_switch.load.vcc ~ load_resistor.p1
    load_switch.load.gnd ~ load_resistor.p2
    load_switch.fet.lcsc_id = "C67273"
    load_resistor.package = "R0805"
    load_switch.pulldown_resistor.package = "R0402"
    load_switch.gate_resistor.package = "R0402"

    # # load_resistor_current = 20mA to 30mA

    # # assert max(ldo.power_out.voltage) / load_resistor.value  within load_resistor_current
    load_resistor.resistance = 100ohm +/- 10%

    # # External load
    power_out ~ external_load.power_in
    external_load.load.vcc ~ external_load_resistor.p1
    external_load.load.gnd ~ external_load_resistor.p2
    external_load.fet.lcsc_id = "C67273"
    external_load.pulldown_resistor.package = "R0402"
    external_load.gate_resistor.package = "R0402"
    # external_load_resistor.package = "R1206"
    external_load_resistor.lcsc_id = "C17901"
    # external_load_resistor.resistance = 100ohm +/- 10%

    # dmm relay
    dmm_i_lim_resistors = new SeriesPowerResistors
    current_sense.power_out ~ dmm_relay.power_in
    dmm_relay.power_out ~ dmm_i_lim_resistors.power_in
    dmm_i_lim_resistors.power_out ~ dmm_out
    dmm_relay_enable ~ dmm_relay.input

    # ADC connections
    adc.inputs[0].line ~ buck.power_out.vcc
    adc.inputs[1].line ~ ldo.power_out.vcc
    adc.inputs[2] ~ current_sense.output
    adc.inputs[3].line ~ current_sense.power_out.vcc

    # GPIO expander
    gpio.gpios[2] ~ buck.enable
    gpio.gpios[3] ~ ldo.enable
    gpio.gpios[4] ~ load_switch.control
    gpio.gpios[5] ~ output_relay.input
    gpio.gpios[6] ~ external_load.control

    _power_3v3.vcc.suggest_net_name = "3V3"
    _power_3v3.gnd.suggest_net_name = "3V3_GND"
    _power_5v.vcc.suggest_net_name = "5V"


# Custom interface for connecting the cells together
interface CellJumper:
    cell = new ElectricSignal
    led_data = new ElectricSignal

module SeriesPowerResistors:
    # Resistors in series with a power connection
    vcc_resistor = new Resistor
    gnd_resistor = new Resistor
    power_in = new ElectricPower
    power_out = new ElectricPower

    power_in.vcc ~ vcc_resistor.p1; vcc_resistor.p2 ~ power_out.vcc
    power_in.gnd ~ gnd_resistor.p1; gnd_resistor.p2 ~ power_out.gnd

    # Resistor values
    vcc_resistor.resistance = 10kohm +/- 10%
    gnd_resistor.resistance = 10kohm +/- 10%
    vcc_resistor.package = "R0402"
    gnd_resistor.package = "R0402"

module LowSideSwitch:
    fet = new MOSFET
    gate_resistor = new Resistor
    pulldown_resistor = new Resistor

    gate_resistor.resistance = 1kohm +/- 5%
    pulldown_resistor.resistance = 10kohm +/- 5%

    power_in = new ElectricPower
    load = new ElectricPower
    control = new ElectricSignal

    # connect up circuit
    control.line ~ gate_resistor.p1; gate_resistor.p2 ~ fet.gate
    control.reference.gnd ~ power_in.gnd

    # Pull down resistor on control
    control.line ~ pulldown_resistor.p1; pulldown_resistor.p2 ~ power_in.gnd

    # load and diode between power and fet
    power_in.vcc ~ load.vcc; load.gnd ~ fet.drain

    # source to ground
    fet.source ~ power_in.gnd


module PiFilter:
    C1 = new Capacitor
    L1 = new Inductor
    C2 = new Capacitor
    cutoff_frequency = 1kHz +/- 20%

    power_in = new ElectricPower
    power_out = new ElectricPower

    power_in.vcc ~ L1.p1; L1.p2 ~ power_out.vcc
    power_in ~ C1.power
    power_out ~ C2.power

    power_in.gnd ~ power_out.gnd

    # FIXME: L1.inductance * C1.value term requires square root
    # assert 1 / (2 * 3.14 * L1.inductance * C1.value) is cutoff_frequency
