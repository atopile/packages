#pragma experiment("FOR_LOOP")

import ElectricSignal
import ElectricPower
import I2C
import Capacitor

component Microchip_Tech_MCP4728_package:
    """Microchip_Tech_MCP4728_E_UN component"""
    lcsc_id = "C108207"
    manufacturer = "Microchip Tech"
    mpn = "MCP4728-E/UN"
    datasheet_url = "https://www.lcsc.com/datasheet/lcsc_datasheet_1811151641_Microchip-Tech-MCP4728-E-UN_C108207.pdf"
    designator_prefix = "U"

    # pins
    signal LDACh ~ pin 4
    signal RDY_BSYh ~ pin 5
    signal SCL ~ pin 2
    signal SDA ~ pin 3
    signal VDD ~ pin 1
    signal VOUTA ~ pin 6
    signal VOUTB ~ pin 7
    signal VOUTC ~ pin 8
    signal VOUTD ~ pin 9
    signal VSS ~ pin 10

module Microchip_MCP4728_driver:
    """Microchip_Tech_MCP4728_E_UN component"""
    ic = new Microchip_Tech_MCP4728_package

    # Power
    power = new ElectricPower
    power.vcc ~ ic.VDD
    power.gnd ~ ic.VSS

    # Capacitor
    bypass_cap = new Capacitor
    power ~ bypass_cap.power
    bypass_cap.capacitance = 100nF +/- 20%
    bypass_cap.package = "C0402"

    # I2C
    i2c = new I2C
    i2c.scl.line ~ ic.SCL
    i2c.sda.line ~ ic.SDA
    i2c.address = 0x60

    # Set required interfaces
    power.required = True
    i2c.required = True

    # Outputs
    outputs = new ElectricSignal[4]

    # Connect outputs
    outputs[0].line ~ ic.VOUTA
    outputs[1].line ~ ic.VOUTB
    outputs[2].line ~ ic.VOUTC
    outputs[3].line ~ ic.VOUTD

    # Connect outputs to power
    for output in outputs:
        output.reference ~ power

module Test:
    # Create DAC
    dac = new Microchip_MCP4728_driver

    # Create power and I2C interfaces
    power = new ElectricPower
    i2c = new I2C

    # Connect power and I2C to DAC
    power ~ dac.power
    i2c ~ dac.i2c

    # Create example electric logics
    outputs = new ElectricSignal[4]

    # Connect outputs to DAC
    outputs[0] ~ dac.outputs[0]
    outputs[1] ~ dac.outputs[1]
    outputs[2] ~ dac.outputs[2]
    outputs[3] ~ dac.outputs[3]
